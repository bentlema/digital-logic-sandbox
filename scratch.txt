
Scratch space...



    def printTruthTable(self):
        numberOfInputs = len(self.inputConnection)
        # Think of number of inputs as a binary string of bits
        # 1 input requires 1 bit
        # 2 inputs requires 2 bits
        # 3 inputs requires 3 bits, etc.
        inputPermutations = int(math.pow(2, numberOfInputs))  # all possible input combinations
        formatString = "{:0" + str(numberOfInputs) + "b}"     # binary number stringified
        for i in range(inputPermutations):
            myBits = formatString.format(i)
            '''
                take a look at http://stackoverflow.com/questions/1679384/converting-python-dictionary-to-list
                we have the input values being generated now, but still need to set those input values and
                calculate the output value, and print.  Since we refer the inputConnections by name, we need
                to create a mapping of connection names to connection number or something...either that, or
                we need to reconsider storing the connection names as a dict, and maybe a list/array would
                be more convenient...not sure yet. Maybe there's a way to store it both ways?

                New idea:  ignore what I said above.  What we really need is a generateTruthTable method
                that gets called upon gate init, and stores the truth table in a data structure of some
                sort.  Then the printTruthTable would just render the once-generated table, as either text,
                or graphics, or however we want.
            '''
            if (numberOfInputs == 1):
                print(myBits[0], outputValue)
            elif (numberOfInputs == 2):
                print(myBits[0], myBits[1], outputValue)
            elif (numberOfInputs == 3):
                print(myBits[0], myBits[1], myBits[2], outputValue)
            print()



